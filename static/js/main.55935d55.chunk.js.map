{"version":3,"sources":["components/PokeCell.tsx","components/PokeBox.tsx","App.tsx","index.tsx"],"names":["Cell","onClick","img","active","className","src","alt","PokeBox","pokeNum","setPokenum","boxNum","Math","ceil","numInBox","r","c","pokeNumByBoxPosition","box","row","column","map","key","PokeCell","n","toString","padStart","App","useState","pokenum","pokenumInput","setPokenumInput","validInput","setValidInput","useEffect","type","min","max","value","onChange","e","input","Number","isNaN","number","parseInt","validateThenSetPokenum","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAgBeA,G,MARe,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,QAAwC,IAA/BC,WAA+B,MAAzB,GAAyB,MAArBC,cAAqB,SACvE,OACE,yBAAKC,UAAS,eAAUD,EAAS,SAAW,YAAcF,QAASA,GAChEC,EAAM,yBAAKG,IAAKH,EAAKI,IAAK,KAAS,QCoC3BC,EAvCkB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACrCC,EAASC,KAAKC,KAAKJ,EAAU,IAC7BK,EAAWL,EAAU,KAAO,EAAI,GAAKA,EAAU,GAC/CM,EAAIH,KAAKC,KAAKC,EAAW,GACzBE,EAAIF,EAAW,IAAM,EAAI,EAAIA,EAAW,EAGxCG,EAAuB,SAACC,EAAaC,EAAaC,GAA3B,OACZ,IAAdT,EAAS,GAAsB,GAAXQ,EAAM,GAASC,GAEtC,OACE,6BACE,yBAAKf,UAAU,aAAf,QAAiCM,GACjC,yBAAKN,UAAU,OACZ,CACC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGgB,KAAI,SAACD,GAAD,OACrB,yBAAKE,IAAKF,GACP,CACC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAI,SAACF,GAAD,OAClB,kBAACI,EAAD,CACED,IAAKH,EACLf,OAAQW,IAAMI,GAAOH,IAAMI,EAC3BlB,QAAS,kBACPQ,EAAWO,EAAqBN,EAAQQ,EAAKC,KAE/CjB,IAAG,iDAnBGqB,EAoBJP,EAAqBN,EAAQQ,EAAKC,GApBhBI,EAAEC,WAAWC,SAAS,EAAG,MAmB1C,UAnBE,IAACF,cCsCXG,EAhDO,WAAO,IAAD,EACIC,mBAAS,GADb,mBACnBC,EADmB,KACVnB,EADU,OAEckB,mBAAS,KAFvB,mBAEnBE,EAFmB,KAELC,EAFK,OAGUH,oBAAS,GAHnB,mBAGnBI,EAHmB,KAGPC,EAHO,KAuB1B,OALAC,qBAAU,WAER,OADAH,EAAgBF,EAAQJ,YACjB,eACN,CAACI,IAGF,yBAAKxB,UAAU,OACb,yDACA,6BACE,kBAAC,EAAD,CAASI,QAASoB,EAASnB,WAAYA,IACvC,6BACE,8CACA,2BACEL,UAAU,cACV8B,KAAK,SACLC,IAAK,EACLC,IAAK,IACLC,MAAOR,EACPS,SAAU,SAACC,GAAD,OAhCW,SAACC,GAE9B,GADAV,EAAgBU,IACXC,OAAOC,MAAMF,GAAQ,CACxB,IAAMG,EAASF,OAAOG,SAASJ,GAC/B,GAAIG,GAAU,GAAKA,GAAU,IAG3B,OAFAlC,EAAWkC,QACXX,GAAc,GAIlBA,GAAc,GAsBWa,CAAuBN,EAAEO,OAAOT,WAIrD,yBAAKjC,UAAU,qBACZ2B,EAAa,IAAM,gCCxC9BgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.55935d55.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface Props {\r\n  active?: boolean;\r\n  img?: string;\r\n  onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\r\n}\r\n\r\nconst Cell: React.FC<Props> = ({ onClick, img = \"\", active = false }) => {\r\n  return (\r\n    <div className={`cell ${active ? \"active\" : \"inactive\"}`} onClick={onClick}>\r\n      {img ? <img src={img} alt={\"\"} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport PokeCell from \"./PokeCell\";\r\n\r\ninterface Props {\r\n  pokeNum: number;\r\n  setPokenum: React.Dispatch<React.SetStateAction<number>>;\r\n}\r\n\r\nconst PokeBox: React.FC<Props> = ({ pokeNum, setPokenum }) => {\r\n  const boxNum = Math.ceil(pokeNum / 30);\r\n  const numInBox = pokeNum % 30 === 0 ? 30 : pokeNum % 30;\r\n  const r = Math.ceil(numInBox / 6);\r\n  const c = numInBox % 6 === 0 ? 6 : numInBox % 6;\r\n\r\n  const minThreeDigits = (n: number) => n.toString().padStart(3, \"0\");\r\n  const pokeNumByBoxPosition = (box: number, row: number, column: number) =>\r\n    (boxNum - 1) * 30 + (row - 1) * 6 + column;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"box-label\">Box: {boxNum}</div>\r\n      <div className=\"box\">\r\n        {[\r\n          [1, 2, 3, 4, 5, 6].map((column) => (\r\n            <div key={column}>\r\n              {[\r\n                [1, 2, 3, 4, 5].map((row) => (\r\n                  <PokeCell\r\n                    key={row}\r\n                    active={r === row && c === column}\r\n                    onClick={() =>\r\n                      setPokenum(pokeNumByBoxPosition(boxNum, row, column))\r\n                    }\r\n                    img={`https://serebii.net/pokedex-swsh/icon/${minThreeDigits(\r\n                      pokeNumByBoxPosition(boxNum, row, column)\r\n                    )}.png`}\r\n                  />\r\n                )),\r\n              ]}\r\n            </div>\r\n          )),\r\n        ]}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeBox;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PokeBox from \"./components/PokeBox\";\n\nconst App: React.FC = () => {\n  const [pokenum, setPokenum] = useState(1);\n  const [pokenumInput, setPokenumInput] = useState(\"1\");\n  const [validInput, setValidInput] = useState(true);\n  const validateThenSetPokenum = (input: string) => {\n    setPokenumInput(input);\n    if (!Number.isNaN(input)) {\n      const number = Number.parseInt(input);\n      if (number >= 1 && number <= 893) {\n        setPokenum(number);\n        setValidInput(true);\n        return;\n      }\n    }\n    setValidInput(false);\n  };\n\n  // Update input field when pokenum changes. I.E. on cell-click\n  useEffect(() => {\n    setPokenumInput(pokenum.toString());\n    return () => {};\n  }, [pokenum]);\n\n  return (\n    <div className=\"app\">\n      <h2>Pokémon Box Calculator</h2>\n      <div>\n        <PokeBox pokeNum={pokenum} setPokenum={setPokenum} />\n        <div>\n          <span>Pokédex #</span>\n          <input\n            className=\"input-field\"\n            type=\"number\"\n            min={1}\n            max={893}\n            value={pokenumInput}\n            onChange={(e) => validateThenSetPokenum(e.target.value)}\n          />\n          {/* <span>Name: {pokenum}</span> */}\n        </div>\n        <div className=\"input-error-label\">\n          {validInput ? \" \" : \"Invalid Pokédex number\"}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}