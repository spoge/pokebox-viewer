{"version":3,"sources":["components/PokeCell.tsx","components/EmptyCell.tsx","components/PokeBox.tsx","components/Card.jsx","components/PokeDexInfo.tsx","components/PokemonInfo.tsx","App.tsx","index.tsx"],"names":["Cell","onClick","img","selected","obtained","className","src","alt","EmptyCell","PokeBox","pokeNum","setPokenum","maxDexNum","pokedex","pokeboxRef","boxNum","Math","ceil","numInBox","r","c","pokeNumByBoxPosition","box","row","column","prevPokeBox","nextPokeBox","disabled","ref","tabIndex","onKeyDown","e","ctrlKey","key","handleNavBox","handleMoveCell","map","pn","process","n","id","toString","padStart","undefined","nationalId","Card","possibleValues","selectedValue","setSelectedValue","useState","shouldShowMenu","setShouldShowMenu","showMenu","event","preventDefault","document","addEventListener","closeMenu","removeEventListener","value","PokeDexInfo","pokedexName","changeToPokedex","pokedexNames","setPokedexNames","updatePokedexList","fetchPokedexNames","then","fetchedNames","useEffect","useCallback","fetch","headers","Accept","response","json","PokemonInfo","pokenum","validateThenSetPokenum","allOptions","Object","keys","pokeId","name","sort","a","b","pokeName","selectedOption","find","pokemon","Autocomplete","disableClearable","blurOnSelect","options","getOptionLabel","option","onChange","renderInput","params","TextField","label","variant","App","useRef","setPokedex","setPokedexName","fetchThenChangePokedex","maxPokedexNum","length","changePokedex","maxNum","fetchPokedex","current","focus","input","Number","isNaN","number","parseInt","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e917ac6b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles/PokeCell.css\";\n\ninterface Props {\n  selected?: boolean;\n  obtained?: boolean;\n  img?: string;\n  onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n\nconst Cell: React.FC<Props> = ({\n  onClick,\n  img = \"\",\n  selected = false,\n  obtained = false,\n}) => {\n  return (\n    <div\n      className={`pokecell ${selected ? \"selected\" : \"notselected\"} ${\n        obtained ? \"obtained\" : \"unobtained\"\n      }`}\n      onClick={onClick}\n    >\n      <img src={img} alt={\"\"} className=\"pokeimage\" />\n      {/* <img\n        src={`${process.env.PUBLIC_URL}/checkmark.png`}\n        alt={\"\"}\n        className=\"checkmark\"\n      /> */}\n    </div>\n  );\n};\n\nexport default Cell;\n","import React from \"react\";\nimport \"./styles/PokeCell.css\";\n\nconst EmptyCell: React.FC = () => <div className=\"pokecell inactive\"></div>;\n\nexport default EmptyCell;\n","import React from \"react\";\nimport \"./styles/PokeBox.css\";\nimport PokeCell from \"./PokeCell\";\nimport EmptyCell from \"./EmptyCell\";\nimport PokeDexType from \"../types/PokeDexType\";\n\ninterface Props {\n  pokeNum: number;\n  setPokenum: React.Dispatch<React.SetStateAction<number>>;\n  maxDexNum: number;\n  pokedex: PokeDexType;\n  pokeboxRef: React.RefObject<HTMLDivElement>;\n}\n\nconst PokeBox: React.FC<Props> = ({\n  pokeNum,\n  setPokenum,\n  maxDexNum,\n  pokedex,\n  pokeboxRef,\n}) => {\n  const boxNum = Math.ceil(pokeNum / 30);\n  const numInBox = pokeNum % 30 === 0 ? 30 : pokeNum % 30;\n  const r = Math.ceil(numInBox / 6);\n  const c = numInBox % 6 === 0 ? 6 : numInBox % 6;\n\n  const minThreeDigits = (n: number) => n.toString().padStart(3, \"0\");\n  const pokeNumByBoxPosition = (box: number, row: number, column: number) =>\n    (boxNum - 1) * 30 + (row - 1) * 6 + column;\n\n  const doesPokemonExist = (pn: number) => pn >= 1 && pn <= maxDexNum;\n  const getPokeDexNumIfExists = (id: string) =>\n    pokedex[id] === undefined ? \"000\" : pokedex[id].nationalId;\n\n  const prevPokeBox = () => {\n    if (boxNum > 1) {\n      setPokenum(pokeNum - 30);\n    }\n  };\n\n  const nextPokeBox = () => {\n    if (boxNum < Math.ceil(maxDexNum / 30)) {\n      if (pokeNum > maxDexNum - 30) {\n        setPokenum(maxDexNum);\n      } else {\n        setPokenum(pokeNum + 30);\n      }\n    }\n  };\n\n  const handleMoveCell = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === \"ArrowLeft\") {\n      if (pokeNum > 1) {\n        setPokenum(pokeNum - 1);\n      }\n    } else if (e.key === \"ArrowRight\") {\n      if (pokeNum < maxDexNum) {\n        setPokenum(pokeNum + 1);\n      }\n    } else if (e.key === \"ArrowUp\") {\n      if (pokeNum - 6 >= 1) {\n        setPokenum(pokeNum - 6);\n      }\n    } else if (e.key === \"ArrowDown\") {\n      if (pokeNum + 6 <= maxDexNum) {\n        setPokenum(pokeNum + 6);\n      }\n    }\n  };\n\n  const handleNavBox = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === \"ArrowLeft\") {\n      prevPokeBox();\n    } else if (e.key === \"ArrowRight\") {\n      nextPokeBox();\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.ctrlKey) {\n      handleNavBox(e);\n    } else {\n      handleMoveCell(e);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"box-header\">\n        <button\n          className=\"button\"\n          onClick={prevPokeBox}\n          disabled={boxNum === 1}\n        >\n          Box {boxNum - 1}\n        </button>\n        <div className=\"box-label\">\n          Box {boxNum} ({boxNum * 30 - 29}-{boxNum * 30})\n        </div>\n        <button\n          className=\"button\"\n          onClick={nextPokeBox}\n          disabled={boxNum >= Math.ceil(maxDexNum / 30)}\n        >\n          Box {boxNum + 1}\n        </button>\n      </div>\n      <div\n        ref={pokeboxRef}\n        className=\"box no-outline\"\n        tabIndex={0}\n        onKeyDown={handleKeyDown}\n      >\n        {[\n          [1, 2, 3, 4, 5, 6].map((column) => (\n            <div key={column}>\n              {[\n                [1, 2, 3, 4, 5].map((row) =>\n                  doesPokemonExist(\n                    pokeNumByBoxPosition(boxNum, row, column)\n                  ) ? (\n                    <PokeCell\n                      key={row}\n                      selected={r === row && c === column}\n                      obtained={true}\n                      onClick={() =>\n                        setPokenum(pokeNumByBoxPosition(boxNum, row, column))\n                      }\n                      img={`${\n                        process.env.PUBLIC_URL\n                      }/pokemon-icons/${getPokeDexNumIfExists(\n                        minThreeDigits(\n                          pokeNumByBoxPosition(boxNum, row, column)\n                        )\n                      )}.png`}\n                    />\n                  ) : (\n                    <EmptyCell key={row} />\n                  )\n                ),\n              ]}\n            </div>\n          )),\n        ]}\n      </div>\n    </div>\n  );\n};\n\nexport default PokeBox;\n","import React, { useState } from \"react\";\nimport \"./styles/Card.css\";\n\nconst Card = ({ possibleValues, selectedValue, setSelectedValue }) => {\n  const [shouldShowMenu, setShouldShowMenu] = useState(false);\n\n  const buttonClick = (event) => {\n    if (shouldShowMenu) {\n      closeMenu();\n    } else {\n      showMenu(event);\n    }\n  };\n\n  const showMenu = (event) => {\n    event.preventDefault();\n\n    setShouldShowMenu(true);\n    document.addEventListener(\"click\", closeMenu);\n  };\n\n  const closeMenu = () => {\n    setShouldShowMenu(false);\n    document.removeEventListener(\"click\", closeMenu);\n  };\n\n  return (\n    <div>\n      <button className=\"big-button\" onClick={buttonClick}>\n        {selectedValue}\n      </button>\n\n      {shouldShowMenu ? (\n        <div className=\"dropdown-menu\">\n          {[...possibleValues].map((value) => (\n            <button\n              className=\"big-button\"\n              key={value}\n              onClick={() => setSelectedValue(value)}\n            >\n              {value}\n            </button>\n          ))}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport \"./styles/PokeDexInfo.css\";\nimport Card from \"./Card\";\n\ninterface Props {\n  pokedexName: string;\n  changeToPokedex: (name: string) => void;\n}\n\nconst PokeDexInfo: React.FC<Props> = ({ pokedexName, changeToPokedex }) => {\n  const [pokedexNames, setPokedexNames] = useState([]);\n\n  const updatePokedexList = () => {\n    const pokedexNamesPromise = fetchPokedexNames();\n    pokedexNamesPromise.then((fetchedNames) => {\n      setPokedexNames(fetchedNames);\n    });\n  };\n\n  useEffect(() => {\n    updatePokedexList();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    updatePokedexList();\n    // eslint-disable-next-line\n  }, [changeToPokedex]);\n\n  const fetchPokedexNames = useCallback(() => {\n    return fetch(\"dex/pokedexes.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    }).then(function (response) {\n      return response.json();\n    });\n  }, []);\n\n  return (\n    <div className=\"pokedex-info\">\n      <div className=\"pokedex-select\">\n        <div className=\"pokedex-select-label\">Pokedex: </div>\n        <div className=\"pokedex-dropdown\">\n          <Card\n            possibleValues={pokedexNames}\n            selectedValue={pokedexName}\n            setSelectedValue={changeToPokedex}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PokeDexInfo;\n","import React from \"react\";\nimport \"./styles/PokemonInfo.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport PokeDexType from \"../types/PokeDexType\";\n\ninterface Props {\n  pokenum: number;\n  pokedex: PokeDexType;\n  validateThenSetPokenum: (input: string) => void;\n}\n\nconst PokemonInfo: React.FC<Props> = ({\n  pokenum,\n  pokedex,\n  validateThenSetPokenum,\n}) => {\n  const allOptions = Object.keys(pokedex)\n    .map((pokeId) => ({\n      name: pokedex[pokeId].name,\n      id: pokeId,\n    }))\n    .sort((a, b) => (a.id < b.id ? -1 : 1));\n  const pokeName = pokedex[pokenum.toString().padStart(3, \"0\")].name;\n  const selectedOption = allOptions.find(\n    (pokemon) => pokemon.name === pokeName\n  );\n  return (\n    <div className=\"pokemon-info\">\n      <Autocomplete\n        className=\"autocomplete\"\n        disableClearable\n        blurOnSelect\n        value={selectedOption}\n        options={allOptions}\n        getOptionLabel={(option) => `#${option.id} - ${option.name}`}\n        onChange={(event, value) => validateThenSetPokenum(value.id)}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Pokémon\" variant=\"outlined\" />\n        )}\n      />\n      <div>\n        National: #{pokedex[pokenum.toString().padStart(3, \"0\")].nationalId}\n      </div>\n    </div>\n  );\n};\n\nexport default PokemonInfo;\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport PokeBox from \"./components/PokeBox\";\nimport PokeDexInfo from \"./components/PokeDexInfo\";\nimport PokemonInfo from \"./components/PokemonInfo\";\nimport PokeDexType from \"./types/PokeDexType\";\n\nconst App: React.FC = () => {\n  const pokeboxRef = useRef<HTMLDivElement>(null);\n\n  const [pokedex, setPokedex] = useState({});\n  const [pokedexName, setPokedexName] = useState(\"\");\n  const [pokenum, setPokenum] = useState(1);\n\n  useEffect(() => {\n    fetchThenChangePokedex(\"National\");\n    // eslint-disable-next-line\n  }, []);\n\n  const maxPokedexNum = (pokedex: PokeDexType) => Object.keys(pokedex).length;\n\n  const changePokedex = useCallback(\n    (name: string, pokedex: PokeDexType) => {\n      setPokedex(pokedex);\n      setPokedexName(name);\n\n      const maxNum = maxPokedexNum(pokedex);\n      if (pokenum > maxNum) {\n        setPokenum(maxNum);\n      }\n    },\n    [pokenum]\n  );\n\n  const fetchPokedex = useCallback((name: string) => {\n    return fetch(\"dex/\" + name + \".json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    }).then(function (response) {\n      return response.json();\n    });\n  }, []);\n\n  const fetchThenChangePokedex = (name: string) => {\n    const pokedexPromise = fetchPokedex(name);\n    pokedexPromise.then((pokedex) => {\n      changePokedex(name, pokedex);\n      pokeboxRef.current?.focus();\n    });\n  };\n\n  const validateThenSetPokenum = (input: string) => {\n    if (!Number.isNaN(input)) {\n      const number = Number.parseInt(input);\n      if (number >= 1 && number <= maxPokedexNum(pokedex)) {\n        setPokenum(number);\n        return;\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h2>Pokémon Box Viewer</h2>\n      <div>\n        <PokeBox\n          pokeboxRef={pokeboxRef}\n          pokeNum={pokenum}\n          setPokenum={setPokenum}\n          maxDexNum={maxPokedexNum(pokedex)}\n          pokedex={pokedex}\n        />\n        {pokedexName !== \"\" ? (\n          <PokemonInfo\n            pokedex={pokedex}\n            pokenum={pokenum}\n            validateThenSetPokenum={validateThenSetPokenum}\n          />\n        ) : null}\n        <PokeDexInfo\n          pokedexName={pokedexName}\n          changeToPokedex={fetchThenChangePokedex}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}